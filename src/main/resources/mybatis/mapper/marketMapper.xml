<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  <mapper namespace="com.kh.spring.market.model.repository.ShopRepository">
  	
  	 <select id="selectPrdListBySet" resultType="Product">
  	 	select *
  	 	from (select rownum rnum, prd_idx, event_idx, sub_img_idx, name, brand, rating, price, sale_per, reg_date, type
				from (select prd_idx, event_idx, sub_img_idx, name, brand, rating, min(price) price, sale_per, reg_date, type
        				from product
        				join prd_detail using (prd_idx)
        		<choose>
	        		<when test="listSet.category != 'all'">
	        		where category = #{listSet.category} and type in ('A',
	        			<choose>
	        				<when test="listSet.check == 'true'">
								'C')
	        				</when>
	        				<otherwise>
								'D')
	        				</otherwise>
	        			</choose>
	        		</when>
	        		<otherwise>
	        		where type in ('A',
	        			<choose>
	        				<when test="listSet.check == 'true'">
								'C')
	        				</when>
	        				<otherwise>
								'D')
	        				</otherwise>
	        			</choose>
	        		</otherwise>
        		</choose>
        		GROUP BY prd_idx, event_idx, sub_img_idx, name, brand, rating, sale_per, reg_date, type
				<if test="listSet.option != null">
        		order by
        			<choose>
        				<when test="listSet.option == 'new'">
        					reg_date
        				</when>
        				<when test="listSet.option == 'pop'">
        					rating
        				</when>
        				<otherwise>
        					price
        				</otherwise>
        			</choose>
					<choose>
						<when test="listSet.option == 'low'">
							asc
						</when>
						<otherwise>
							desc
						</otherwise>
					</choose>    		
        		</if>
        		))
		where rnum between ${((pageUtil.curPage-1) * pageUtil.cntPerPage) + 1} and ${pageUtil.curPage * pageUtil.cntPerPage} 
	</select>
	
	<select id="prdListCnt" resultType="java.lang.Integer">
  	 	select count(*)
		from (select prd_idx, event_idx, sub_img_idx, name, brand, rating, min(price) price, sale_per, reg_date, type
        		from product
        		join prd_detail using (prd_idx)
        		<choose>
	        		<when test="listSet.category != 'all'">
	        		where category = #{listSet.category} and type in ('A',
	        			<choose>
	        				<when test="listSet.check == 'true'">
								'C')
	        				</when>
	        				<otherwise>
								'D')
	        				</otherwise>
	        			</choose>
	        		</when>
	        		<otherwise>
	        		where type in ('A',
	        			<choose>
	        				<when test="listSet.check == 'true'">
								'C')
	        				</when>
	        				<otherwise>
								'D')
	        				</otherwise>
	        			</choose>
	        		</otherwise>
        		</choose>
        		GROUP BY prd_idx, event_idx, sub_img_idx, name, brand, rating, sale_per, reg_date, type)
	</select>
	
	<select id="selectPrdList" resultType="map">
		select p.prd_idx, p.name, p.brand, p.category, p.reg_date,d.po_name, d.po_stock, d.price, d.state, d.dt_idx
		,f.save_path, max(f.rename_file_name) RENAME_FILE_NAME from product p join prd_detail d on(p.prd_idx = d.prd_idx) 
		join file_info f on (f.type_idx = p.prd_idx) 
		
		<where>
			<if test="state != 'all'">
				pd.state = #{state}
			</if>
			<if test="keyword != null">
				p.name = #{keyword} or pd.po_name = #{keyword}
			</if>
		</where>
		group by  p.prd_idx, p.name, p.brand, p.category, p.reg_date,d.po_name, d.po_stock, d.price, d.state, d.dt_idx
		,f.save_path
	</select>
	
  	
  	<select id="selectPrdByIdx" resultType="Product">
  		select prd_idx, event_idx, sub_img_idx, name, brand, rating, min(price) price, sale_per
		from product
		join prd_detail using(prd_idx)
		where prd_idx = #{prdIdx}
		GROUP by prd_idx, event_idx, sub_img_idx, name, brand, rating, sale_per
  		
  	</select>
  	
  	<select id="selectReviewByPrdIdx" resultType="Review">
		select rv_idx, rv.user_idx user_idx, rv.prd_idx prd_idx, order_idx, rv.dt_idx dt_idx, rv.state state, "USER".user_name user_name, prd.name prd_name, pd.po_name dt_name, rv.rating rating, rv.type type, recommand, rv.reg_date reg_date, rv.is_del is_del, rv_content
		from review rv
		join product prd on (rv.prd_idx = prd.prd_idx)
		join "USER" ON (rv.USER_IDX = "USER".USER_IDX)
		join prd_detail pd on(rv.dt_idx = pd.dt_idx) 
		where rv.prd_idx = #{prdIdx}
  	</select>
  	
  	<select id="selectCouponByUserIdx" resultType="Coupon">
	  	select coupon_idx, uc_idx, user_idx, name, sale_per, type, coupon.exp_date exp_date ,user_coupon.exp_date uc_exp_date, reg_date, user_coupon.is_del
		from coupon
		join user_coupon using(coupon_idx)
		where user_idx = #{userIdx}
  	</select>
  	
  </mapper>